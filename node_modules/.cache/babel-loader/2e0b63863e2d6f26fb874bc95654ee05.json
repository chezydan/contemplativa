{"ast":null,"code":"module.exports = minimatch;\nminimatch.Minimatch = Minimatch;\nvar path = {\n  sep: '/'\n};\n\ntry {\n  path = require('path');\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};\n\nvar expand = require('brace-expansion');\n\nvar plTypes = {\n  '!': {\n    open: '(?:(?!(?:',\n    close: '))[^/]*?)'\n  },\n  '?': {\n    open: '(?:',\n    close: ')?'\n  },\n  '+': {\n    open: '(?:',\n    close: ')+'\n  },\n  '*': {\n    open: '(?:',\n    close: ')*'\n  },\n  '@': {\n    open: '(?:',\n    close: ')'\n  }\n}; // any single thing other than /\n// don't need to escape / when using new RegExp()\n\nvar qmark = '[^/]'; // * => any number of characters\n\nvar star = qmark + '*?'; // ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\n\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'; // not a ^ or / followed by a dot,\n// followed by anything, any number of times.\n\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'; // characters that need to be escaped in RegExp.\n\nvar reSpecials = charSet('().*{}+?[]^$\\\\!'); // \"abc\" -> { a:true, b:true, c:true }\n\nfunction charSet(s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true;\n    return set;\n  }, {});\n} // normalizes slashes.\n\n\nvar slashSplit = /\\/+/;\nminimatch.filter = filter;\n\nfunction filter(pattern, options) {\n  options = options || {};\n  return function (p, i, list) {\n    return minimatch(p, pattern, options);\n  };\n}\n\nfunction ext(a, b) {\n  a = a || {};\n  b = b || {};\n  var t = {};\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k];\n  });\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k];\n  });\n  return t;\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch;\n  var orig = minimatch;\n\n  var m = function minimatch(p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options));\n  };\n\n  m.Minimatch = function Minimatch(pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options));\n  };\n\n  return m;\n};\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch;\n  return minimatch.defaults(def).Minimatch;\n};\n\nfunction minimatch(p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required');\n  }\n\n  if (!options) options = {}; // shortcut: comments match nothing.\n\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false;\n  } // \"\" only matches \"\"\n\n\n  if (pattern.trim() === '') return p === '';\n  return new Minimatch(pattern, options).match(p);\n}\n\nfunction Minimatch(pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options);\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required');\n  }\n\n  if (!options) options = {};\n  pattern = pattern.trim(); // windows support: need to use /, not \\\n\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/');\n  }\n\n  this.options = options;\n  this.set = [];\n  this.pattern = pattern;\n  this.regexp = null;\n  this.negate = false;\n  this.comment = false;\n  this.empty = false; // make the set of regexps etc.\n\n  this.make();\n}\n\nMinimatch.prototype.debug = function () {};\n\nMinimatch.prototype.make = make;\n\nfunction make() {\n  // don't do it more than once.\n  if (this._made) return;\n  var pattern = this.pattern;\n  var options = this.options; // empty patterns and comments match nothing.\n\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true;\n    return;\n  }\n\n  if (!pattern) {\n    this.empty = true;\n    return;\n  } // step 1: figure out negation, etc.\n\n\n  this.parseNegate(); // step 2: expand braces\n\n  var set = this.globSet = this.braceExpand();\n  if (options.debug) this.debug = console.error;\n  this.debug(this.pattern, set); // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit);\n  });\n  this.debug(this.pattern, set); // glob --> regexps\n\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this);\n  }, this);\n  this.debug(this.pattern, set); // filter out everything that didn't compile properly.\n\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1;\n  });\n  this.debug(this.pattern, set);\n  this.set = set;\n}\n\nMinimatch.prototype.parseNegate = parseNegate;\n\nfunction parseNegate() {\n  var pattern = this.pattern;\n  var negate = false;\n  var options = this.options;\n  var negateOffset = 0;\n  if (options.nonegate) return;\n\n  for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === '!'; i++) {\n    negate = !negate;\n    negateOffset++;\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset);\n  this.negate = negate;\n} // Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\n\n\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options);\n};\n\nMinimatch.prototype.braceExpand = braceExpand;\n\nfunction braceExpand(pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options;\n    } else {\n      options = {};\n    }\n  }\n\n  pattern = typeof pattern === 'undefined' ? this.pattern : pattern;\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern');\n  }\n\n  if (options.nobrace || !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern];\n  }\n\n  return expand(pattern);\n} // parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\n\n\nMinimatch.prototype.parse = parse;\nvar SUBPARSE = {};\n\nfunction parse(pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long');\n  }\n\n  var options = this.options; // shortcuts\n\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR;\n  if (pattern === '') return '';\n  var re = '';\n  var hasMagic = !!options.nocase;\n  var escaping = false; // ? => one single character\n\n  var patternListStack = [];\n  var negativeLists = [];\n  var stateChar;\n  var inClass = false;\n  var reClassStart = -1;\n  var classStart = -1; // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))' : '(?!\\\\.)';\n  var self = this;\n\n  function clearStateChar() {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star;\n          hasMagic = true;\n          break;\n\n        case '?':\n          re += qmark;\n          hasMagic = true;\n          break;\n\n        default:\n          re += '\\\\' + stateChar;\n          break;\n      }\n\n      self.debug('clearStateChar %j %j', stateChar, re);\n      stateChar = false;\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c); // skip over any that are escaped.\n\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c;\n      escaping = false;\n      continue;\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false;\n\n      case '\\\\':\n        clearStateChar();\n        escaping = true;\n        continue;\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c); // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n\n        if (inClass) {\n          this.debug('  in class');\n          if (c === '!' && i === classStart + 1) c = '^';\n          re += c;\n          continue;\n        } // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n\n\n        self.debug('call clearStateChar %j', stateChar);\n        clearStateChar();\n        stateChar = c; // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n\n        if (options.noext) clearStateChar();\n        continue;\n\n      case '(':\n        if (inClass) {\n          re += '(';\n          continue;\n        }\n\n        if (!stateChar) {\n          re += '\\\\(';\n          continue;\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        }); // negation is (?:(?!js)[^/]*)\n\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:';\n        this.debug('plType %j %j', stateChar, re);\n        stateChar = false;\n        continue;\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)';\n          continue;\n        }\n\n        clearStateChar();\n        hasMagic = true;\n        var pl = patternListStack.pop(); // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n\n        re += pl.close;\n\n        if (pl.type === '!') {\n          negativeLists.push(pl);\n        }\n\n        pl.reEnd = re.length;\n        continue;\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|';\n          escaping = false;\n          continue;\n        }\n\n        clearStateChar();\n        re += '|';\n        continue;\n      // these are mostly the same in regexp and glob\n\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar();\n\n        if (inClass) {\n          re += '\\\\' + c;\n          continue;\n        }\n\n        inClass = true;\n        classStart = i;\n        reClassStart = re.length;\n        re += c;\n        continue;\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c;\n          escaping = false;\n          continue;\n        } // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n\n\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i);\n\n          try {\n            RegExp('[' + cs + ']');\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE);\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]';\n            hasMagic = hasMagic || sp[1];\n            inClass = false;\n            continue;\n          }\n        } // finish up the class.\n\n\n        hasMagic = true;\n        inClass = false;\n        re += c;\n        continue;\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar();\n\n        if (escaping) {\n          // no need\n          escaping = false;\n        } else if (reSpecials[c] && !(c === '^' && inClass)) {\n          re += '\\\\';\n        }\n\n        re += c;\n    } // switch\n\n  } // for\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n\n\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1);\n    sp = this.parse(cs, SUBPARSE);\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0];\n    hasMagic = hasMagic || sp[1];\n  } // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n\n\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length);\n    this.debug('setting tail', re, pl); // maybe some even number of \\, then maybe 1 \\, followed by a |\n\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\';\n      } // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n\n\n      return $1 + $1 + $2 + '|';\n    });\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re);\n    var t = pl.type === '*' ? star : pl.type === '?' ? qmark : '\\\\' + pl.type;\n    hasMagic = true;\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail;\n  } // handle trailing things that only matter at the very end.\n\n\n  clearStateChar();\n\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\';\n  } // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n\n\n  var addPatternStart = false;\n\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(':\n      addPatternStart = true;\n  } // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n\n\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n];\n    var nlBefore = re.slice(0, nl.reStart);\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);\n    var nlAfter = re.slice(nl.reEnd);\n    nlLast += nlAfter; // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n\n    var openParensBefore = nlBefore.split('(').length - 1;\n    var cleanAfter = nlAfter;\n\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '');\n    }\n\n    nlAfter = cleanAfter;\n    var dollar = '';\n\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$';\n    }\n\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;\n    re = newRe;\n  } // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n\n\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re;\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re;\n  } // parsing just a piece of a larger pattern.\n\n\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic];\n  } // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n\n\n  if (!hasMagic) {\n    return globUnescape(pattern);\n  }\n\n  var flags = options.nocase ? 'i' : '';\n\n  try {\n    var regExp = new RegExp('^' + re + '$', flags);\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.');\n  }\n\n  regExp._glob = pattern;\n  regExp._src = re;\n  return regExp;\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe();\n};\n\nMinimatch.prototype.makeRe = makeRe;\n\nfunction makeRe() {\n  if (this.regexp || this.regexp === false) return this.regexp; // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n\n  var set = this.set;\n\n  if (!set.length) {\n    this.regexp = false;\n    return this.regexp;\n  }\n\n  var options = this.options;\n  var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;\n  var flags = options.nocase ? 'i' : '';\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return p === GLOBSTAR ? twoStar : typeof p === 'string' ? regExpEscape(p) : p._src;\n    }).join('\\\\\\/');\n  }).join('|'); // must match entire pattern\n  // ending in a * or ** will make it less strict.\n\n  re = '^(?:' + re + ')$'; // can match anything, as long as it's not this.\n\n  if (this.negate) re = '^(?!' + re + ').*$';\n\n  try {\n    this.regexp = new RegExp(re, flags);\n  } catch (ex) {\n    this.regexp = false;\n  }\n\n  return this.regexp;\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {};\n  var mm = new Minimatch(pattern, options);\n  list = list.filter(function (f) {\n    return mm.match(f);\n  });\n\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern);\n  }\n\n  return list;\n};\n\nMinimatch.prototype.match = match;\n\nfunction match(f, partial) {\n  this.debug('match', f, this.pattern); // short-circuit in the case of busted things.\n  // comments, etc.\n\n  if (this.comment) return false;\n  if (this.empty) return f === '';\n  if (f === '/' && partial) return true;\n  var options = this.options; // windows: need to use /, not \\\n\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/');\n  } // treat the test path as a set of pathparts.\n\n\n  f = f.split(slashSplit);\n  this.debug(this.pattern, 'split', f); // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set;\n  this.debug(this.pattern, 'set', set); // Find the basename of the path by looking for the last non-empty segment\n\n  var filename;\n  var i;\n\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i];\n    if (filename) break;\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i];\n    var file = f;\n\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename];\n    }\n\n    var hit = this.matchOne(file, pattern, partial);\n\n    if (hit) {\n      if (options.flipNegate) return true;\n      return !this.negate;\n    }\n  } // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n\n\n  if (options.flipNegate) return false;\n  return this.negate;\n} // set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\n\n\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options;\n  this.debug('matchOne', {\n    'this': this,\n    file: file,\n    pattern: pattern\n  });\n  this.debug('matchOne', file.length, pattern.length);\n\n  for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {\n    this.debug('matchOne loop');\n    var p = pattern[pi];\n    var f = file[fi];\n    this.debug(pattern, p, f); // should be impossible.\n    // some invalid regexp stuff in the set.\n\n    if (p === false) return false;\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f]); // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n\n      var fr = fi;\n      var pr = pi + 1;\n\n      if (pr === pl) {\n        this.debug('** at the end'); // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' || !options.dot && file[fi].charAt(0) === '.') return false;\n        }\n\n        return true;\n      } // ok, let's see if we can swallow whatever we can.\n\n\n      while (fr < fl) {\n        var swallowee = file[fr];\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee); // XXX remove this slice.  Just pass the start index.\n\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee); // found a match.\n\n          return true;\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' || !options.dot && swallowee.charAt(0) === '.') {\n            this.debug('dot detected!', file, fr, pattern, pr);\n            break;\n          } // ** swallows a segment, and continue.\n\n\n          this.debug('globstar swallow a segment, and continue');\n          fr++;\n        }\n      } // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n\n\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr);\n        if (fr === fl) return true;\n      }\n\n      return false;\n    } // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n\n\n    var hit;\n\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase();\n      } else {\n        hit = f === p;\n      }\n\n      this.debug('string match', p, f, hit);\n    } else {\n      hit = f.match(p);\n      this.debug('pattern match', p, f, hit);\n    }\n\n    if (!hit) return false;\n  } // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n  // now either we fell off the end of the pattern, or we're done.\n\n\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true;\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial;\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = fi === fl - 1 && file[fi] === '';\n    return emptyFileEnd;\n  } // should be unreachable.\n\n\n  throw new Error('wtf?');\n}; // replace stuff like \\* with *\n\n\nfunction globUnescape(s) {\n  return s.replace(/\\\\(.)/g, '$1');\n}\n\nfunction regExpEscape(s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}","map":{"version":3,"names":["module","exports","minimatch","Minimatch","path","sep","require","er","GLOBSTAR","expand","plTypes","open","close","qmark","star","twoStarDot","twoStarNoDot","reSpecials","charSet","s","split","reduce","set","c","slashSplit","filter","pattern","options","p","i","list","ext","a","b","t","Object","keys","forEach","k","defaults","def","length","orig","m","TypeError","nocomment","charAt","trim","match","join","regexp","negate","comment","empty","make","prototype","debug","_made","parseNegate","globSet","braceExpand","console","error","globParts","map","si","parse","indexOf","negateOffset","nonegate","l","substr","nobrace","SUBPARSE","isSub","noglobstar","re","hasMagic","nocase","escaping","patternListStack","negativeLists","stateChar","inClass","reClassStart","classStart","patternStart","dot","self","clearStateChar","len","noext","push","type","start","reStart","pl","pop","reEnd","cs","substring","RegExp","sp","tail","slice","replace","_","$1","$2","addPatternStart","n","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","newRe","globUnescape","flags","regExp","_glob","_src","makeRe","twoStar","regExpEscape","ex","mm","f","nonull","partial","filename","file","matchBase","hit","matchOne","flipNegate","fi","pi","fl","fr","pr","swallowee","toLowerCase","emptyFileEnd","Error"],"sources":["/home/dan/Documents/React/contemplativa/node_modules/minimatch/minimatch.js"],"sourcesContent":["module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}